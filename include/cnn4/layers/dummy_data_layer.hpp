#ifndef CAFFE_DUMMY_DATA_LAYER_HPP_
#define CAFFE_DUMMY_DATA_LAYER_HPP_




#include "caffe/filler.hpp"



namespace
{

  /**
   * @brief Provides data to the Net generated by a Filler.
   *
   * TODO(dox): thorough documentation for Forward and proto params.
   */
  template <typename Dtype>
  class DummyDataLayer : public Layer<Dtype>
  {
  public:
    explicit DummyDataLayer()
      : Layer<Dtype>() {}
    virtual void LayerSetUp(const vector<Blob<Dtype>*> & bottom,
                            const vector<Blob<Dtype>*> & top);
    // Data layers should be shared by multiple solvers in parallel
    virtual inline bool ShareInParallel() const { return true; }
    // Data layers have no bottoms, so reshaping is trivial.
    virtual void Reshape(const vector<Blob<Dtype>*> & bottom,
                         const vector<Blob<Dtype>*> & top) {}

    virtual inline const char* type() const { return "DummyData"; }
    virtual inline int ExactNumBottomBlobs() const { return 0; }
    virtual inline int MinTopBlobs() const { return 1; }

  public:
    virtual void Forward(CPUContext* context, const vector<Blob<Dtype>*> & bottom,
                             const vector<Blob<Dtype>*> & top);
    virtual void Backward(CPUContext* context, const vector<Blob<Dtype>*> & top,
                              const vector<bool> & propagate_down, const vector<Blob<Dtype>*> & bottom) {}
    virtual void Backward(GPUContext* context, const vector<Blob<Dtype>*> & top,
                              const vector<bool> & propagate_down, const vector<Blob<Dtype>*> & bottom) {}

    vector<SHARED_PTR<Filler<Dtype> > > fillers_;
    vector<bool> refill_;
  };

}  // namespace

#endif  // CAFFE_DUMMY_DATA_LAYER_HPP_
